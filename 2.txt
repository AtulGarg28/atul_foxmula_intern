import java.util.*;
public class Main
{
    private int[] stack;
    private int max,top;
    
    Main(int max){
        this.max=max;
        stack = new int[max];
        top=-1;
    }
    
    boolean push(int data){
        boolean result=false;
        if(top>=max){
            System.out.println("Stack overflowed....");
            result=false;
        }else{
            top++;
            stack[top]=data;
            result=true;
        }
        return result;
    }
    
    int pop(){
        int pop_no=0;
        if(top<=-1){
            System.out.println("Stack is already empty....");
            pop_no=0;
        }else{
            pop_no=stack[top];
            top--;
        }
        return pop_no;
    }
    
    boolean checkEmpty(){
        boolean result=false;
        if(top<=-1){
            System.out.println("Stack empty");
            result=true;
        }
        return result;
    }
    
    int count(){
        if(top>-1){
            return top+1;
        }
        return 0;
    }
    
    static boolean checkEqual(Main m1,Main m2){
        if(m1.count()==m2.count()){
            System.out.println("Both stacks are equal with size of "+m1.count());
            return true;
        }
        return false;
    }
    
    
	public static void main(String[] args) {
		Main m1 = new Main(10);
		Main m2 = new Main(10);
		Scanner s = new Scanner(System.in);
		int choice,data;
		while(true){
		    System.out.println("1 to push in 1st stack.");
		    System.out.println("2 to push in 2nd stack.");
		    System.out.println("3 to pop in 1st stack.");
		    System.out.println("4 to pop in 2nd stack.");
		    System.out.println("Enter choice");
		    choice=s.nextInt();
		    switch(choice)
		    {
		        case 1:
		            System.out.println("Enter data to push in 1st stack");
		            data = s.nextInt();
		            m1.push(data);
		            checkEqual(m1,m2);
		            break;
                case 2:
                    System.out.println("Enter data to push in 2nd stack");
                    data = s.nextInt();
		            m2.push(data);
		            checkEqual(m1,m2);
                    break;
                case 3:
                    System.out.println("Element popped: "+m1.pop()+" from 1st stack");
                    checkEqual(m1,m2);
                    break;
                case 4:
                    System.out.println("Element popped: "+m2.pop()+" from 2nd stack");
                    checkEqual(m1,m2);
                    break;
		    }
		}
	}
}
